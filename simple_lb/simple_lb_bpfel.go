// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type simple_lbListenerKey struct {
	Protocol uint8
	Pad      uint8
	Port     uint16
}

type simple_lbListenerValue struct {
	DstPort     uint16
	IdleTimeout uint16
}

type simple_lbRouteKey struct {
	LbIp    uint32
	LbPort  uint16
	_       [2]byte
	SrcIp   uint32
	SrcPort uint16
	_       [2]byte
}

type simple_lbRouteValue struct {
	LbIp    uint32
	LbPort  uint16
	_       [2]byte
	DstIp   uint32
	DstPort uint16
	LbMac   [6]uint8
	DstMac  [6]uint8
	Fin     uint8
	_       [1]byte
}

// loadSimple_lb returns the embedded CollectionSpec for simple_lb.
func loadSimple_lb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Simple_lbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load simple_lb: %w", err)
	}

	return spec, err
}

// loadSimple_lbObjects loads simple_lb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*simple_lbObjects
//	*simple_lbPrograms
//	*simple_lbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSimple_lbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSimple_lb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// simple_lbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type simple_lbSpecs struct {
	simple_lbProgramSpecs
	simple_lbMapSpecs
}

// simple_lbSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type simple_lbProgramSpecs struct {
	SimpleLb *ebpf.ProgramSpec `ebpf:"simple_lb"`
}

// simple_lbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type simple_lbMapSpecs struct {
	ArpTablesMap *ebpf.MapSpec `ebpf:"arp_tables_map"`
	ListenersMap *ebpf.MapSpec `ebpf:"listeners_map"`
	RouteMap     *ebpf.MapSpec `ebpf:"route_map"`
	UpstreamsMap *ebpf.MapSpec `ebpf:"upstreams_map"`
}

// simple_lbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSimple_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type simple_lbObjects struct {
	simple_lbPrograms
	simple_lbMaps
}

func (o *simple_lbObjects) Close() error {
	return _Simple_lbClose(
		&o.simple_lbPrograms,
		&o.simple_lbMaps,
	)
}

// simple_lbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSimple_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type simple_lbMaps struct {
	ArpTablesMap *ebpf.Map `ebpf:"arp_tables_map"`
	ListenersMap *ebpf.Map `ebpf:"listeners_map"`
	RouteMap     *ebpf.Map `ebpf:"route_map"`
	UpstreamsMap *ebpf.Map `ebpf:"upstreams_map"`
}

func (m *simple_lbMaps) Close() error {
	return _Simple_lbClose(
		m.ArpTablesMap,
		m.ListenersMap,
		m.RouteMap,
		m.UpstreamsMap,
	)
}

// simple_lbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSimple_lbObjects or ebpf.CollectionSpec.LoadAndAssign.
type simple_lbPrograms struct {
	SimpleLb *ebpf.Program `ebpf:"simple_lb"`
}

func (p *simple_lbPrograms) Close() error {
	return _Simple_lbClose(
		p.SimpleLb,
	)
}

func _Simple_lbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed simple_lb_bpfel.o
var _Simple_lbBytes []byte
