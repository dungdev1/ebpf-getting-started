/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __XDP_COUNTER_BPF_SKEL_H__
#define __XDP_COUNTER_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_counter_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *xcounter_map;
	} maps;
	struct {
		struct bpf_program *xdp_xcounter;
	} progs;
	struct {
		struct bpf_link *xdp_xcounter;
	} links;

#ifdef __cplusplus
	static inline struct xdp_counter_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct xdp_counter_bpf *open_and_load();
	static inline int load(struct xdp_counter_bpf *skel);
	static inline int attach(struct xdp_counter_bpf *skel);
	static inline void detach(struct xdp_counter_bpf *skel);
	static inline void destroy(struct xdp_counter_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
xdp_counter_bpf__destroy(struct xdp_counter_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_counter_bpf__create_skeleton(struct xdp_counter_bpf *obj);

static inline struct xdp_counter_bpf *
xdp_counter_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_counter_bpf *obj;
	int err;

	obj = (struct xdp_counter_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_counter_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_counter_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_counter_bpf *
xdp_counter_bpf__open(void)
{
	return xdp_counter_bpf__open_opts(NULL);
}

static inline int
xdp_counter_bpf__load(struct xdp_counter_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_counter_bpf *
xdp_counter_bpf__open_and_load(void)
{
	struct xdp_counter_bpf *obj;
	int err;

	obj = xdp_counter_bpf__open();
	if (!obj)
		return NULL;
	err = xdp_counter_bpf__load(obj);
	if (err) {
		xdp_counter_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_counter_bpf__attach(struct xdp_counter_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_counter_bpf__detach(struct xdp_counter_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_counter_bpf__elf_bytes(size_t *sz);

static inline int
xdp_counter_bpf__create_skeleton(struct xdp_counter_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "xdp_counter_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "xcounter_map";
	s->maps[0].map = &obj->maps.xcounter_map;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_xcounter";
	s->progs[0].prog = &obj->progs.xdp_xcounter;
	s->progs[0].link = &obj->links.xdp_xcounter;

	s->data = xdp_counter_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *xdp_counter_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x58\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x0c\0\x61\x12\x04\0\0\0\0\0\x61\x13\0\0\0\0\0\0\xbf\x31\0\0\0\0\0\0\x07\x01\0\
\0\x0e\0\0\0\x2d\x21\x26\0\0\0\0\0\xb7\x04\0\0\x0c\0\0\0\xbf\x35\0\0\0\0\0\0\
\x0f\x45\0\0\0\0\0\0\x71\x34\x0c\0\0\0\0\0\x71\x53\x01\0\0\0\0\0\x67\x03\0\0\
\x08\0\0\0\x4f\x43\0\0\0\0\0\0\x15\x03\x07\0\x86\xdd\0\0\x55\x03\x1d\0\x08\0\0\
\0\xb7\x03\0\0\x14\0\0\0\xbf\x14\0\0\0\0\0\0\x0f\x34\0\0\0\0\0\0\x2d\x24\x19\0\
\0\0\0\0\xb7\x02\0\0\x09\0\0\0\x05\0\x05\0\0\0\0\0\xb7\x03\0\0\x28\0\0\0\xbf\
\x14\0\0\0\0\0\0\x0f\x34\0\0\0\0\0\0\x2d\x24\x13\0\0\0\0\0\xb7\x02\0\0\x06\0\0\
\0\x0f\x21\0\0\0\0\0\0\x71\x11\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\x15\x01\x0e\
\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x08\0\0\0\0\0\x07\0\0\0\x08\0\0\0\
\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xbf\x03\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\xb7\0\0\0\
\x02\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x1c\x04\0\0\x1c\x04\0\0\x42\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\
\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\
\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x06\0\0\0\x19\0\0\0\0\0\0\x08\x07\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\0\x20\
\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x2c\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\0\
\0\0\0\0\0\0\x02\x0b\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x01\
\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x35\0\0\0\x01\0\0\0\0\0\0\0\x3a\0\0\0\x05\0\
\0\0\x40\0\0\0\x3e\0\0\0\x08\0\0\0\x80\0\0\0\x44\0\0\0\x0a\0\0\0\xc0\0\0\0\x50\
\0\0\0\0\0\0\x0e\x0c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0f\0\0\0\x5d\0\0\0\x05\
\0\0\x04\x14\0\0\0\x64\0\0\0\x06\0\0\0\0\0\0\0\x69\0\0\0\x06\0\0\0\x20\0\0\0\
\x72\0\0\0\x06\0\0\0\x40\0\0\0\x7c\0\0\0\x06\0\0\0\x60\0\0\0\x8c\0\0\0\x06\0\0\
\0\x80\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x9b\0\0\0\x0e\0\0\0\x9f\0\0\0\x01\0\
\0\x0c\x10\0\0\0\x73\x01\0\0\x03\0\0\x04\x0e\0\0\0\x7a\x01\0\0\x14\0\0\0\0\0\0\
\0\x81\x01\0\0\x14\0\0\0\x30\0\0\0\x8a\x01\0\0\x15\0\0\0\x60\0\0\0\x92\x01\0\0\
\0\0\0\x01\x01\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x13\0\0\0\x04\0\0\0\
\x06\0\0\0\xa0\x01\0\0\0\0\0\x08\x16\0\0\0\xa7\x01\0\0\0\0\0\x08\x17\0\0\0\xad\
\x01\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\x0b\x02\0\0\x0b\0\0\x84\x14\0\0\0\x11\
\x02\0\0\x19\0\0\0\0\0\0\x04\x15\x02\0\0\x19\0\0\0\x04\0\0\x04\x1d\x02\0\0\x19\
\0\0\0\x08\0\0\0\x21\x02\0\0\x15\0\0\0\x10\0\0\0\x29\x02\0\0\x15\0\0\0\x20\0\0\
\0\x2c\x02\0\0\x15\0\0\0\x30\0\0\0\x35\x02\0\0\x19\0\0\0\x40\0\0\0\x39\x02\0\0\
\x19\0\0\0\x48\0\0\0\x42\x02\0\0\x1a\0\0\0\x50\0\0\0\x48\x02\0\0\x1b\0\0\0\x60\
\0\0\0\x4e\x02\0\0\x1b\0\0\0\x80\0\0\0\x54\x02\0\0\0\0\0\x08\x13\0\0\0\x59\x02\
\0\0\0\0\0\x08\x16\0\0\0\x61\x02\0\0\0\0\0\x08\x06\0\0\0\x98\x02\0\0\x08\0\0\
\x84\x28\0\0\0\xa0\x02\0\0\x19\0\0\0\0\0\0\x04\x15\x02\0\0\x19\0\0\0\x04\0\0\
\x04\xa9\x02\0\0\x1d\0\0\0\x08\0\0\0\xb2\x02\0\0\x15\0\0\0\x20\0\0\0\xbe\x02\0\
\0\x19\0\0\0\x30\0\0\0\xc6\x02\0\0\x19\0\0\0\x38\0\0\0\x48\x02\0\0\x1e\0\0\0\
\x40\0\0\0\x4e\x02\0\0\x1e\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x19\0\0\0\
\x04\0\0\0\x03\0\0\0\xd0\x02\0\0\x01\0\0\x04\x10\0\0\0\xd9\x02\0\0\x1f\0\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\x05\x10\0\0\0\xdf\x02\0\0\x20\0\0\0\0\0\0\0\xe8\x02\0\0\
\x21\0\0\0\0\0\0\0\xf2\x02\0\0\x22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x19\
\0\0\0\x04\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x04\0\0\0\x08\0\
\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\0\0\x04\0\0\0\x04\0\0\0\x27\x04\0\0\0\0\0\
\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x23\0\0\0\x04\0\0\0\x0d\0\
\0\0\x2c\x04\0\0\0\0\0\x0e\x24\0\0\0\x01\0\0\0\x34\x04\0\0\x01\0\0\x0f\0\0\0\0\
\x0d\0\0\0\0\0\0\0\x20\0\0\0\x3a\x04\0\0\x01\0\0\x0f\0\0\0\0\x25\0\0\0\0\0\0\0\
\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x6c\x6f\x6e\x67\x20\x69\x6e\x74\0\x74\x79\x70\x65\0\x6b\
\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\
\x78\x63\x6f\x75\x6e\x74\x65\x72\x5f\x6d\x61\x70\0\x78\x64\x70\x5f\x6d\x64\0\
\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\
\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\
\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x63\x74\x78\0\x78\
\x64\x70\x5f\x78\x63\x6f\x75\x6e\x74\x65\x72\0\x78\x64\x70\0\x30\x3a\x31\0\x2f\
\x76\x61\x67\x72\x61\x6e\x74\x2f\x65\x62\x70\x66\x2f\x78\x64\x70\x2d\x63\x6f\
\x75\x6e\x74\x65\x72\x2f\x78\x64\x70\x5f\x63\x6f\x75\x6e\x74\x65\x72\x2e\x62\
\x70\x66\x2e\x63\0\x20\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\
\x65\x6e\x64\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\
\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x30\x3a\x30\0\
\x20\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\
\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\
\x74\x61\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x64\x61\x74\x61\x20\x2b\x20\x6e\
\x65\x74\x77\x6f\x72\x6b\x5f\x68\x65\x61\x64\x65\x72\x5f\x6f\x66\x66\x73\x65\
\x74\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\x20\x7b\0\x65\x74\x68\x68\
\x64\x72\0\x68\x5f\x64\x65\x73\x74\0\x68\x5f\x73\x6f\x75\x72\x63\x65\0\x68\x5f\
\x70\x72\x6f\x74\x6f\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\
\x5f\x5f\x62\x65\x31\x36\0\x5f\x5f\x75\x31\x36\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x73\x68\x6f\x72\x74\0\x30\x3a\x32\0\x20\x20\x20\x20\x75\x69\x6e\x74\
\x31\x36\x5f\x74\x20\x68\x5f\x70\x72\x6f\x74\x6f\x20\x3d\x20\x65\x74\x68\x2d\
\x3e\x68\x5f\x70\x72\x6f\x74\x6f\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x68\x5f\
\x70\x72\x6f\x74\x6f\x20\x3d\x3d\x20\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\x5f\
\x50\x5f\x49\x50\x29\x29\x20\x7b\0\x69\x70\x68\x64\x72\0\x69\x68\x6c\0\x76\x65\
\x72\x73\x69\x6f\x6e\0\x74\x6f\x73\0\x74\x6f\x74\x5f\x6c\x65\x6e\0\x69\x64\0\
\x66\x72\x61\x67\x5f\x6f\x66\x66\0\x74\x74\x6c\0\x70\x72\x6f\x74\x6f\x63\x6f\
\x6c\0\x63\x68\x65\x63\x6b\0\x73\x61\x64\x64\x72\0\x64\x61\x64\x64\x72\0\x5f\
\x5f\x75\x38\0\x5f\x5f\x73\x75\x6d\x31\x36\0\x5f\x5f\x62\x65\x33\x32\0\x31\0\
\x20\x20\x20\x20\x69\x66\x20\x28\x28\x76\x6f\x69\x64\x20\x2a\x29\x26\x69\x70\
\x5f\x68\x65\x61\x64\x65\x72\x5b\x31\x5d\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\
\x6e\x64\x29\0\x30\x3a\x37\0\x69\x70\x76\x36\x68\x64\x72\0\x70\x72\x69\x6f\x72\
\x69\x74\x79\0\x66\x6c\x6f\x77\x5f\x6c\x62\x6c\0\x70\x61\x79\x6c\x6f\x61\x64\
\x5f\x6c\x65\x6e\0\x6e\x65\x78\x74\x68\x64\x72\0\x68\x6f\x70\x5f\x6c\x69\x6d\
\x69\x74\0\x69\x6e\x36\x5f\x61\x64\x64\x72\0\x69\x6e\x36\x5f\x75\0\x75\x36\x5f\
\x61\x64\x64\x72\x38\0\x75\x36\x5f\x61\x64\x64\x72\x31\x36\0\x75\x36\x5f\x61\
\x64\x64\x72\x33\x32\0\x20\x20\x20\x20\x69\x66\x20\x28\x28\x76\x6f\x69\x64\x20\
\x2a\x29\x26\x69\x70\x36\x5f\x68\x65\x61\x64\x65\x72\x5b\x31\x5d\x20\x3e\x20\
\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x30\x3a\x34\0\x20\x20\x20\x20\x69\x66\
\x20\x28\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x69\x6e\x64\x65\x78\x20\x3d\x3d\
\x20\x30\x29\x20\x7b\0\x20\x20\x20\x20\x6c\x6f\x6e\x67\x20\x2a\x70\x72\x6f\x74\
\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\
\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x78\x63\x6f\x75\
\x6e\x74\x65\x72\x5f\x6d\x61\x70\x2c\x20\x26\x70\x72\x6f\x74\x6f\x63\x6f\x6c\
\x5f\x69\x6e\x64\x65\x78\x29\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x70\x72\x6f\
\x74\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x29\x20\x7b\0\x20\x20\x20\x20\x20\
\x20\x20\x20\x2a\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\x2b\
\x2b\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\
\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x78\x63\x6f\x75\x6e\x74\x65\
\x72\x5f\x6d\x61\x70\x2c\x20\x26\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x69\x6e\
\x64\x65\x78\x2c\x20\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x5f\x63\x6f\x75\x6e\x74\
\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x7d\0\x63\x68\x61\x72\0\x4c\x49\
\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\
\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x1c\x01\0\0\x30\x01\0\0\x8c\0\
\0\0\x08\0\0\0\xac\0\0\0\x01\0\0\0\0\0\0\0\x11\0\0\0\x10\0\0\0\xac\0\0\0\x11\0\
\0\0\0\0\0\0\xb4\0\0\0\xe0\0\0\0\x29\x3c\0\0\x08\0\0\0\xb4\0\0\0\x16\x01\0\0\
\x25\x38\0\0\x10\0\0\0\xb4\0\0\0\x40\x01\0\0\x0e\x50\0\0\x20\0\0\0\xb4\0\0\0\
\x40\x01\0\0\x09\x50\0\0\x40\0\0\0\xb4\0\0\0\xc0\x01\0\0\x1d\x60\0\0\x60\0\0\0\
\xb4\0\0\0\xe5\x01\0\0\x09\x70\0\0\x88\0\0\0\xb4\0\0\0\x6a\x02\0\0\x09\xd8\0\0\
\xb8\0\0\0\xb4\0\0\0\xfc\x02\0\0\x09\0\x01\0\xd0\0\0\0\xb4\0\0\0\0\0\0\0\0\0\0\
\0\xe0\0\0\0\xb4\0\0\0\x2b\x03\0\0\x09\x90\0\0\xf0\0\0\0\xb4\0\0\0\0\0\0\0\0\0\
\0\0\xf8\0\0\0\xb4\0\0\0\x4a\x03\0\0\x1c\xa0\0\0\x10\x01\0\0\xb4\0\0\0\x9a\x03\
\0\0\x09\xa4\0\0\x18\x01\0\0\xb4\0\0\0\xb4\x03\0\0\x18\xa8\0\0\x28\x01\0\0\xb4\
\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\xb4\0\0\0\xcf\x03\0\0\x09\xac\0\0\x58\x01\0\
\0\xb4\0\0\0\x25\x04\0\0\x01\xbc\0\0\x10\0\0\0\xac\0\0\0\x08\0\0\0\0\0\0\0\x0f\
\0\0\0\xb0\0\0\0\0\0\0\0\x08\0\0\0\x0f\0\0\0\x12\x01\0\0\0\0\0\0\x28\0\0\0\x12\
\0\0\0\xbc\x01\0\0\0\0\0\0\x40\0\0\0\x12\0\0\0\xbc\x01\0\0\0\0\0\0\x70\0\0\0\
\x18\0\0\0\x68\x02\0\0\0\0\0\0\x90\0\0\0\x18\0\0\0\x94\x02\0\0\0\0\0\0\xa0\0\0\
\0\x1c\0\0\0\x68\x02\0\0\0\0\0\0\xc0\0\0\0\x1c\0\0\0\x27\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\x02\0\x58\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\0\0\x02\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x73\0\0\0\0\0\x02\0\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6b\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\
\0\0\0\x2f\0\0\0\x11\0\x03\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x1a\0\0\0\x12\0\
\x02\0\0\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\xf8\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\
\0\x30\x01\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x14\x04\0\0\0\0\0\0\0\0\0\0\x06\0\0\
\0\x2c\x04\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x60\0\
\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x80\0\0\0\0\
\0\0\0\0\0\0\0\x04\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xa0\0\0\0\0\0\0\0\
\0\0\0\0\x04\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xe0\0\0\0\0\0\0\0\0\0\0\0\x04\
\0\0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x10\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x20\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x30\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x40\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x5c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x6c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x7c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x8c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x9c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xac\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\xbc\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xcc\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x0d\x0c\x0b\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\
\x78\x74\0\x2e\x6d\x61\x70\x73\0\x78\x64\x70\x5f\x78\x63\x6f\x75\x6e\x74\x65\
\x72\0\x2e\x72\x65\x6c\x78\x64\x70\0\x78\x63\x6f\x75\x6e\x74\x65\x72\x5f\x6d\
\x61\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\
\x30\x5f\x37\0\x4c\x42\x42\x30\x5f\x35\0\x4c\x42\x42\x30\x5f\x31\x30\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\
\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x4a\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\
\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x66\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd5\x01\0\0\0\0\0\0\x76\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4b\x0a\0\0\0\0\0\0\xdc\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5a\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x28\x0c\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x0c\0\0\0\x05\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x27\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xe8\x0c\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x07\0\0\0\x02\0\0\0\x08\0\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\x62\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x07\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0d\0\0\0\
\0\0\0\xa0\x01\0\0\0\0\0\0\x07\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x3c\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0e\0\0\0\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x52\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x0e\0\0\0\0\0\0\x89\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct xdp_counter_bpf *xdp_counter_bpf::open(const struct bpf_object_open_opts *opts) { return xdp_counter_bpf__open_opts(opts); }
struct xdp_counter_bpf *xdp_counter_bpf::open_and_load() { return xdp_counter_bpf__open_and_load(); }
int xdp_counter_bpf::load(struct xdp_counter_bpf *skel) { return xdp_counter_bpf__load(skel); }
int xdp_counter_bpf::attach(struct xdp_counter_bpf *skel) { return xdp_counter_bpf__attach(skel); }
void xdp_counter_bpf::detach(struct xdp_counter_bpf *skel) { xdp_counter_bpf__detach(skel); }
void xdp_counter_bpf::destroy(struct xdp_counter_bpf *skel) { xdp_counter_bpf__destroy(skel); }
const void *xdp_counter_bpf::elf_bytes(size_t *sz) { return xdp_counter_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
xdp_counter_bpf__assert(struct xdp_counter_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __XDP_COUNTER_BPF_SKEL_H__ */
